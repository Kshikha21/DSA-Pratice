package com.LinkedList;

import java.util.Scanner;

public class LinkedListUse {
	public static LinkedListNode<Integer> takeInput(){
		LinkedListNode<Integer> head1 = null,tail=null;
		Scanner sc=new Scanner(System.in);
		int data=sc.nextInt();
		
		while(data!=-1) {
		LinkedListNode<Integer> currentNode=new LinkedListNode<Integer>(data);
		if(head1==null){ ///first node or not 
		head1=currentNode;
		tail=currentNode;
		}
		else {
//			LinkedListNode<Integer> tail=head1;
//			while(tail.next!=null) {
//				tail=tail.next;
//			}
//			//tail refers to last node
//			//connect current node after last node
//			tail.next=currentNode;	
			tail.next=currentNode;
			tail=currentNode; //tail=tail.next;
			
		}
			data=sc.nextInt();
		}
	return head1;
	}
	public static void printLinkList(LinkedListNode<Integer> head) {
		LinkedListNode<Integer> temp=head;
		 while(temp!=null) {
			 System.out.print(temp.data+" ");
			 temp=temp.next;
		 }
		 System.out.println();
	}
	public static LinkedListNode<Integer> insert(LinkedListNode<Integer> head, int pos, int data){
	     int count=0;
	        LinkedListNode<Integer> Previous=head;
	        LinkedListNode<Integer> NewNode=new LinkedListNode<Integer>(data);
	        LinkedListNode<Integer> NextNode;
	        if(pos==0) {
	        	NewNode.next=Previous;
	        	head=NewNode;
	 //    return NewNode;
	        }
	        
	        else {
	       while(Previous!=null) {
	        if(count+1==pos){
	              NextNode=Previous.next;
	              NewNode.next=NextNode;
	            Previous.next=NewNode;
	            count++;
	            
	        }else{
	            Previous=Previous.next;
	            count++;
	        
	        }
	       }}
	    return head;
	    }
	
	public static LinkedListNode<Integer> delete(LinkedListNode<Integer> head,int pos){
		LinkedListNode<Integer> prev=head;
		  int count=0;
		  while(prev!=null) {
		  if(pos==0 && prev.next!=null) {
			  head=prev.next;
			  return head;
		  }
		  while(count<pos-1 && prev.next!=null) {
			  prev=prev.next;
			  count++;
		  }
		  if(prev.next!=null) {
		  prev.next=prev.next.next;}
		  else {
			  return head;
		  }
		  }
		return head;
	}
	public static int findNode(LinkedListNode<Integer> head, int n) {
		LinkedListNode<Integer> temp=head;
        int count=0;
        while(temp!=null){
            if(temp.data==n){
                return count;
            }
            count++;
            temp=temp.next;
        }
        if(temp==null){
            count=-1;
        }
        return count;
	}
	
	public static LinkedListNode<Integer> appendLastNToFirst(LinkedListNode<Integer> head, int n) {
		LinkedListNode<Integer> temp=head;
        	LinkedListNode<Integer> prev=head;
            LinkedListNode<Integer> pointingToHead=head;
        int count=0;
        while(temp!=null){
            temp=temp.next;
            count++;
        }
        temp=head;
        int pos=count-n;
        int traverse=0;
        while(traverse<pos-1 &&temp!=null){
            traverse++;
            temp=temp.next;
        }
        prev=temp.next;
        pointingToHead=head;
        while(prev.next!=null){
             prev=prev.next;
        }
        prev.next=head;
        head=pointingToHead;
        return head;
	}

	public static void main(String[] args) {
		LinkedListNode<Integer> t1=takeInput();
		// printLinkList(t1);
		//t1=	 insert(t1,5,41);
		//t1=delete(t1,4);
	//	int result=findNode(t1,20);
		 printLinkList(t1);
	//	 System.out.println(result);
		 t1=appendLastNToFirst(t1,2);
		 printLinkList(t1);

	}
	
	public static int lengthOfLinkedList(LinkedListNode<Integer> head) {
		LinkedListNode<Integer> temp=head;
		int l=0;
		while(temp!=null) {
			temp=temp.next;
			l++;
		}
		return l;
	}
	public static LinkedListNode<Integer> MakeChangeToLinkedList(LinkedListNode<Integer> head, int n){
		LinkedListNode<Integer> temp=head;
		LinkedListNode<Integer> newhead;
		LinkedListNode<Integer> newtail;
		
	}
}
